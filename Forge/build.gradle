repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-releases/' }
    maven { url 'https://maven.blamejared.com' }
}
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.1"
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath('io.socket:socket.io-client:2.0.1')
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
configurations {
    shade
    compile.extendsFrom(shade)
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
group = 'siongsng.rpmtwupdatemod'
archivesBaseName = 'RPMTW-Update-Mod-Forge-1.18.1'
//java.toolchain.languageVersion = JavaLanguageVersion.of(17) //1.18 Use Java 17
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
minecraft {
    mappings channel: 'official', version: '1.18.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'siongsng.rpmtwupdatemod.RpmtwUpdateMod.isDebug', 'true'
            arg "-mixin.config=rpmtw_update_mod.mixin.cfg.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                rpmtw_update_mod {
                    source sourceSets.main
                    resource sourceSets.main.resources
                }
            }
        }
    }
}
dependencies {
    shade('commons-lang:commons-lang:20030203.000129')
    shade('net.sf.ezmorph:ezmorph:1.0.6')
    shade('commons-collections:commons-collections:20040616')
    shade implementation('io.socket:socket.io-client:2.0.1')

    implementation fg.deobf("vazkii.patchouli:Patchouli:1.18.1-62-SNAPSHOT")
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.10'

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}
jar {
    manifest.attributes([
            "Specification-Title"     : "rpmtwupdatemod",
            "Specification-Vendor"    : "SiongSng",
            "LICENSE"                 : "MIT",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${project.version}${ getVersionMetadata()}",
            "Implementation-Vendor"   : "SiongSng",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"            : "rpmtw_update_mod.mixin.cfg.json"
    ])
}
jar.finalizedBy('reobfJar')
shadowJar {
    configurations = [project.configurations.shade]
    relocate 'org.apache.commons.lang.enum', 'org.apache.commons.lang.enumm'
    classifier = ''
}
reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    }
}
artifacts {
    archives tasks.shadowJar
}
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}
//mixin {
//    disableAnnotationProcessorCheck = true
//}
artifacts {
    archives deobfJar
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


static String getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")
    return  "";
//    if (build_id != null) {
//        return "+build.${build_id}"
//    } else {
//        return "";
//    }
}